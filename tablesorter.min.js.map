{
  "version": 3,
  "sources": ["../src/tablesorter.js"],
  "sourcesContent": ["const removeCommas = (v) => v.replaceAll(\",\", \"\");\nconst removePercent = (v) => v.replace(/%$/, \"\");\nconst emptyZeros = (v) => (v === \"-\" || v === \"\" ? \"0\" : v);\n\n// Table data types\nexport const numeric = {\n  name: \"numeric\",\n  filter: (v) => emptyZeros(removeCommas(v)),\n  check: (v) => !isNaN(v),\n  sort: (a, b) => parseFloat(a) - parseFloat(b),\n  defaultAsc: false,\n};\n\nexport const percent = Object.assign({}, numeric, {\n  name: \"percent\",\n  filter: (v) => emptyZeros(removePercent(removeCommas(v))),\n});\n\nexport const text = {\n  name: \"text\",\n  filter: (v) => v,\n  check: (v) => true,\n  sort: (a, b) => a.localeCompare(b),\n  defaultAsc: true,\n};\n\n// Types should be ordered from most specific to most generic\nexport const types = [percent, numeric, text];\n\nexport function preferDatasetValue(elem) {\n  // Return the text that should be used for sorting\n  // NOTE This function previously used innerText, but was changed since jsDOM\n  // doesn't support innerText. There may be formatting differences within\n  // the element, but any leading or trailing whitespace will be trimmed\n  return elem.dataset.value ? elem.dataset.value : elem.textContent.trim();\n}\n\nexport class Table {\n  constructor(elem) {\n    this.elem = elem;\n    this.rows = [];\n    this.types = [];\n    const thead = elem.querySelector(\"thead\");\n    if (!thead) return; // Sorting requires a thead\n\n    this.tbody = elem.querySelector(\"tbody\");\n    this.rows = Array.from(this.tbody.querySelectorAll(\"tr\"));\n    const headers = thead.querySelectorAll(\"th\");\n\n    // Determine the types of each column and add an event listener for sorting\n    headers.forEach((header, col) => {\n      // Ignore headers with the `no-sort` class\n      if (header.classList.contains(\"no-sort\")) return;\n\n      // Column types can be requested by setting dataset-type to the type name\n      const name = header.dataset.type;\n\n      // Find an appropriate type for the column\n      // The last type is a catchall and doesn't need to be tested\n      let t = types.slice(0, -1).find((type) => {\n        if (name && type.name === name) {\n          return true;\n        }\n\n        return this.rows.every((row) => {\n          return type.check(type.filter(this.getValue(row.children[col])));\n        });\n      });\n\n      // If no type was matched, use the last available type\n      if (!t) t = types[types.length - 1];\n\n      // Save the type\n      this.types[col] = this.detect(header, col);\n\n      // Add the event listener\n      header.addEventListener(\"click\", () => {\n        // If there is already a sorting class, invert that, otherwise use default\n        let asc = t.defaultAsc;\n        if (header.classList.contains(\"asc\")) {\n          asc = false;\n        } else if (header.classList.contains(\"desc\")) {\n          asc = true;\n        }\n\n        // Remove the sorting classes from all headers\n        headers.forEach((th) => th.classList.remove(\"active\", \"desc\", \"asc\"));\n\n        // Add the correct classes to the clicked header\n        header.classList.add(\"active\");\n        asc ? header.classList.add(\"asc\") : header.classList.add(\"desc\");\n        this.sortWithType(col, asc, t);\n      });\n\n      // Prevent repeated clicking on headers from selecting them\n      header.addEventListener(\"mousedown\", (evt) => evt.preventDefault());\n    });\n  }\n\n  detect(header, col) {\n    // To set a column type manually, add a dataset-type with the type name\n    const name = header.dataset.type;\n\n    // Find an appropriate type for the column\n    // The last type is a catchall and doesn't need to be tested\n    let t = types.slice(0, -1).find((type) => {\n      if (name && type.name === name) return true;\n      return this.rows.every((row) => this.checkRow(type, row, col));\n    });\n\n    if (t) return t;\n\n    // If no type was matched, use the last available type\n    return types[types.length - 1];\n  }\n\n  checkRow(type, row, col) {\n    return type.check(type.filter(this.getValue(row.children[col])));\n  }\n\n  getValue(elem) {\n    return preferDatasetValue(elem);\n  }\n\n  sort(col, asc = true) {\n    this.sortWithType(col, asc, this.types[col]);\n  }\n\n  sortAsc(col) {\n    this.sort(col, true);\n  }\n  sortDesc(col) {\n    this.sort(col, false);\n  }\n\n  sortWithType(col, asc, type) {\n    // Sorts the table using the given column, type, and direction\n    const sorted = this.rows.sort((a, b) => {\n      const va = type.filter(this.getValue(a.children[col]));\n      const vb = type.filter(this.getValue(b.children[col]));\n      return asc ? type.sort(va, vb) : type.sort(vb, va);\n    });\n\n    // Append each sorted row to the tbody\n    sorted.forEach((row) => this.tbody.appendChild(row));\n\n    // Dispatch an event whenever the table is sorted\n    const evt = new window.CustomEvent(\"sort\", {\n      detail: { col, asc },\n    });\n    this.elem.dispatchEvent(evt);\n  }\n\n  addEventListener(...args) {\n    this.elem.addEventListener(...args);\n  }\n\n  onSort(listener, options) {\n    this.addEventListener(\"sort\", listener, options);\n  }\n}\n\nexport function New(elem) {\n  return new Table(elem);\n}\n"],
  "mappings": "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",
  "names": ["tablesorter_exports", "__export", "New", "Table", "numeric", "percent", "preferDatasetValue", "text", "types", "removeCommas", "v", "removePercent", "emptyZeros", "a", "b", "elem", "thead", "headers", "header", "col", "name", "t", "type", "row", "asc", "th", "evt", "va", "vb", "args", "listener", "options"]
}
