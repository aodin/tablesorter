{
  "version": 3,
  "sources": ["../src/tablesorter.js"],
  "sourcesContent": ["// Types should be ordered from most specific to most generic\nexport const types = [\n  {\n    name: \"numeric\",\n    filter: (value) => (value === \"-\" ? \"0\" : value.replaceAll(\",\", \"\")),\n    check: (value) => !isNaN(parseFloat(value)),\n    sort: (a, b) => a - b,\n    defaultAsc: false,\n  },\n  {\n    name: \"text\",\n    filter: (value) => value,\n    check: (value) => true,\n    sort: (a, b) => a.localeCompare(b),\n    defaultAsc: true,\n  },\n];\n\nexport function preferDatasetValue(elem) {\n  // Return the text that should be used for sorting\n  // NOTE This function previously used innerText, but was changed since jsDOM\n  // doesn't support innerText. There may be formatting differences within\n  // the element, but any leading or trailing whitespace will be trimmed\n  return elem.dataset.value ? elem.dataset.value : elem.textContent.trim();\n}\n\nexport class Table {\n  constructor(elem, _window = window) {\n    this.rows = [];\n    this.types = [];\n    const thead = elem.querySelector(\"thead\");\n    if (!thead) return; // Sorting requires a thead\n\n    this.tbody = elem.querySelector(\"tbody\");\n    this.rows = Array.from(this.tbody.querySelectorAll(\"tr\"));\n    const headers = thead.querySelectorAll(\"th\");\n\n    // Determine the types of each column and add an event listener for sorting\n    headers.forEach((header, col) => {\n      // Ignore headers with the `no-sort` class\n      if (header.classList.contains(\"no-sort\")) return;\n\n      // Column types can be requested by setting dataset-type to the type name\n      const name = header.dataset.type;\n\n      // Find an appropriate type for the column\n      // The last type is a catchall and doesn't need to be tested\n      let t = types.slice(0, -1).find((type) => {\n        if (name && type.name === name) {\n          return true;\n        }\n\n        return this.rows.every((row) => {\n          return type.check(type.filter(this.getValue(row.children[col])));\n        });\n      });\n\n      // If no type was matched, use the last available type\n      if (!t) t = types[types.length - 1];\n\n      // Save the type\n      this.types[col] = t;\n\n      // Add the event listener\n      header.addEventListener(\"click\", () => {\n        // If there is already a sorting class, invert that, otherwise use default\n        let asc = t.defaultAsc;\n        if (header.classList.contains(\"asc\")) {\n          asc = false;\n        } else if (header.classList.contains(\"desc\")) {\n          asc = true;\n        }\n\n        // Remove the sorting classes from all headers\n        headers.forEach((th) => th.classList.remove(\"active\", \"desc\", \"asc\"));\n\n        // Add the correct classes to the clicked header\n        header.classList.add(\"active\");\n        asc ? header.classList.add(\"asc\") : header.classList.add(\"desc\");\n        this.sortWithType(col, asc, t);\n\n        // Dispatch an event whenever the table is sorted\n        if (_window) {\n          const event = new _window.CustomEvent(\"sort\", {\n            detail: { col, asc },\n          });\n          elem.dispatchEvent(event);\n        }\n      });\n\n      // Prevent repeated clicking on headers from selecting them\n      header.addEventListener(\"mousedown\", (evt) => evt.preventDefault());\n    });\n  }\n\n  getValue(elem) {\n    return preferDatasetValue(elem);\n  }\n\n  sort(col, asc = true) {\n    this.sortWithType(col, asc, this.types[col]);\n  }\n\n  sortAsc(col) {\n    this.sort(col, true);\n  }\n  sortDesc(col) {\n    this.sort(col, false);\n  }\n\n  sortWithType(col, asc, type) {\n    // Sorts the table using the given column, type, and direction\n    const sorted = this.rows.sort((a, b) => {\n      const va = type.filter(this.getValue(a.children[col]));\n      const vb = type.filter(this.getValue(b.children[col]));\n      return asc ? type.sort(va, vb) : type.sort(vb, va);\n    });\n\n    // Append each sorted row to the tbody\n    sorted.forEach((row) => this.tbody.appendChild(row));\n  }\n}\n"],
  "mappings": "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",
  "names": ["tablesorter_exports", "__export", "Table", "preferDatasetValue", "types", "value", "a", "b", "elem", "_window", "thead", "headers", "header", "col", "name", "t", "type", "row", "asc", "th", "event", "evt", "va", "vb"]
}
